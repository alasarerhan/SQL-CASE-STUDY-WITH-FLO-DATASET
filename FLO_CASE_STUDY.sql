-- FLO DATABASE CASE STUDY

--QUESTION 1 Create a database named Customers and a table named FLO that will contain the variables in the given data set.
CREATE DATABASE CUSTOMERS

CREATE TABLE FLO (
	MASTER_ID							VARCHAR(50), -- unique customer id 
	ORDER_CHANNEL						VARCHAR(50), -- channel of the shopping platform
	LAST_ORDER_CHANNEL					VARCHAR(50), -- channel of the shopping platform of the last order
	FIRST_ORDER_DATE					DATE,        -- customers first purchase date
	LAST_ORDER_DATE						DATE,        -- customers last order date
	LAST_ORDER_DATE_ONLINE				DATE,        -- customers last online order date
	LAST_ORDER_DATE_OFFLINE				DATE,        -- customers last offline order date
	ORDER_NUM_TOTAL_EVER_ONLINE			INT,		 -- customers total online orders 
	ORDER_NUM_TOTAL_EVER_OFFLINE		INT,         -- customers total offline orders 
	CUSTOMER_VALUE_TOTAL_EVER_ONLINE	FLOAT,		 -- customers total online spent
	CUSTOMER_VALUE_TOTAL_EVER_OFFLINE	FLOAT,       -- customers total offline spent
	INTERESTED_IN_CATEGORIES			VARCHAR(50), -- categories customers was interested in last 12 months
	STORE_TYPE							VARCHAR(10)  -- store type (3 different categories: A,B,C 
);


--QUESTION 2: Write the query to show how many different customers have made a purchase.

SELECT COUNT(DISTINCT(MASTER_ID)) AS CUSTOMER_COUNT FROM FLO;


--QUESTION 3: Write the query that will return the total number of purchases and turnover.
SELECT 
	SUM(ORDER_NUM_TOTAL_EVER_ONLINE + ORDER_NUM_TOTAL_EVER_OFFLINE) AS TOTAL_ORDER,
	ROUND(SUM(CUSTOMER_VALUE_TOTAL_EVER_OFFLINE + CUSTOMER_VALUE_TOTAL_EVER_ONLINE), 2) AS TOTAL_REVENUE
FROM FLO;


--QUESTION 4: Write the query that will return the average turnover per purchase. 

SELECT  
	ROUND((SUM(CUSTOMER_VALUE_TOTAL_EVER_OFFLINE + CUSTOMER_VALUE_TOTAL_EVER_ONLINE) / 
	SUM(ORDER_NUM_TOTAL_EVER_ONLINE + ORDER_NUM_TOTAL_EVER_OFFLINE) 
	), 2) AS AVG_ORDER_REVENUE 
 FROM FLO


--QUESTION 5: Write the query that will return the total turnover and number of purchases made through the last order channel (last_order_channel).

SELECT LAST_ORDER_CHANNEL,
SUM(CUSTOMER_VALUE_TOTAL_EVER_OFFLINE + CUSTOMER_VALUE_TOTAL_EVER_ONLINE) AS TOTAL_REVENUE,
SUM(ORDER_NUM_TOTAL_EVER_ONLINE + ORDER_NUM_TOTAL_EVER_OFFLINE) AS  TOTAL_ORDER
FROM FLO
GROUP BY  LAST_ORDER_CHANNEL


--QUESTION 6: Write the query that retrieves the total turnover obtained in the store type breakdown.
SELECT STORE_TYPE, 
       ROUND(SUM(CUSTOMER_VALUE_TOTAL_EVER_OFFLINE + CUSTOMER_VALUE_TOTAL_EVER_ONLINE), 2) AS TOTAL_REVENUE
FROM FLO 
GROUP BY STORE_TYPE;



--QUESTION 7: WRITE THE QUERY THAT WILL RETURN THE NUMBER OF PURCHASES IN THE YEAR BREAKDOWN (BASE THE YEAR ON THE CUSTOMER'S FIRST PURCHASE DATE (FIRST_ORDER_DATE))

SELECT 
YEAR(FIRST_ORDER_DATE) AS YEAR_,  SUM(ORDER_NUM_TOTAL_EVER_OFFLINE + ORDER_NUM_TOTAL_EVER_ONLINE) AS TOTAL_ORDER
FROM  FLO
GROUP BY YEAR(FIRST_ORDER_DATE)


--QUESTION 8: WRITE THE QUERY THAT WILL CALCULATE THE AVERAGE TURNOVER PER PURCHASE IN THE MOST RECENT SHOPPING CHANNEL BREAKDOWN.
SELECT LAST_ORDER_CHANNEL, 
       ROUND(SUM(CUSTOMER_VALUE_TOTAL_EVER_OFFLINE + CUSTOMER_VALUE_TOTAL_EVER_ONLINE),2) AS TOTAL_REVENUE,
	   SUM(ORDER_NUM_TOTAL_EVER_OFFLINE + ORDER_NUM_TOTAL_EVER_ONLINE) AS TOTAL_ORDER,
       ROUND(SUM(CUSTOMER_VALUE_TOTAL_EVER_OFFLINE + CUSTOMER_VALUE_TOTAL_EVER_ONLINE) / SUM(ORDER_NUM_TOTAL_EVER_OFFLINE + ORDER_NUM_TOTAL_EVER_ONLINE),2) AS EFFICIENCY
FROM FLO
GROUP BY LAST_ORDER_CHANNEL;


--QUESTION 9: WRITE THE QUERY THAT RETRIEVES THE MOST POPULAR CATEGORY IN THE LAST 12 MONTHS.

SELECT INTERESTED_IN_CATEGORIES, 
       COUNT(*) AS FREQUENCY 
FROM FLO
GROUP BY INTERESTED_IN_CATEGORIES
ORDER BY 2 DESC;


--QUESTION 10: WRITE THE QUERY THAT RETURNS THE MOST PREFERRED STORE_TYPABLE.

SELECT TOP 1   
	STORE_TYPE, 
    COUNT(*) AS FREQUENCY
FROM FLO 
GROUP BY STORE_TYPE 
ORDER BY 2 DESC;




/*QUESTION 11: WRITE THE QUERY THAT RETRIEVES THE MOST POPULAR CATEGORY AND 
HOW MUCH SHOPPING WAS DONE IN THIS CATEGORY BASED ON THE LAST ORDER CHANNEL (LAST_ORDER_CHANNEL). */

SELECT DISTINCT LAST_ORDER_CHANNEL,
(
	SELECT TOP 1 INTERESTED_IN_CATEGORIES
	FROM FLO  WHERE LAST_ORDER_CHANNEL=F.LAST_ORDER_CHANNEL
	GROUP BY INTERESTED_IN_CATEGORIES
	ORDER BY 
	SUM(ORDER_NUM_TOTAL_EVER_ONLINE+ORDER_NUM_TOTAL_EVER_OFFLINE) DESC 
),
(
	SELECT TOP 1 SUM(ORDER_NUM_TOTAL_EVER_ONLINE+ORDER_NUM_TOTAL_EVER_OFFLINE)
	FROM FLO  WHERE LAST_ORDER_CHANNEL=F.LAST_ORDER_CHANNEL
	GROUP BY INTERESTED_IN_CATEGORIES
	ORDER BY 
	SUM(ORDER_NUM_TOTAL_EVER_ONLINE+ORDER_NUM_TOTAL_EVER_OFFLINE) DESC 
)
FROM FLO F


--QUESTION 12: WRITE THE QUERY THAT RETRIEVES THE ID OF THE PERSON WHO SHOPPED THE MOST. 
 
SELECT TOP 1 MASTER_ID   		    
FROM FLO 
GROUP BY MASTER_ID 
ORDER BY  SUM(CUSTOMER_VALUE_TOTAL_EVER_OFFLINE + CUSTOMER_VALUE_TOTAL_EVER_ONLINE) DESC 


/*QUESTION 13: WRITE THE QUERY THAT RETRIEVES THE AVERAGE TURNOVER PER PURCHASE AND THE AVERAGE NUMBER OF SHOPPING DAYS
(SHOPPING FREQUENCY) OF THE PERSON WHO MAKES THE MOST PURCHASES. */


SELECT D.MASTER_ID,ROUND((D.TOTAL_ORDER / D.TOTAL_ORDER),2) AS  AVG_PER_ORDER,
ROUND((DATEDIFF(DAY, FIRST_ORDER_DATE, LAST_ORDER_DATE)/D.TOTAL_ORDER),1) AS ORDER_DAY_AVG
FROM
(
SELECT TOP 1 MASTER_ID, FIRST_ORDER_DATE, LAST_ORDER_DATE,
		   SUM(CUSTOMER_VALUE_TOTAL_EVER_OFFLINE + CUSTOMER_VALUE_TOTAL_EVER_ONLINE) AS TOTAL_REVENUE,
		   SUM(ORDER_NUM_TOTAL_EVER_OFFLINE + ORDER_NUM_TOTAL_EVER_ONLINE) TOTAL_ORDER
	FROM FLO 
	GROUP BY MASTER_ID,FIRST_ORDER_DATE, LAST_ORDER_DATE
ORDER BY TOTAL_REVENUE DESC
) D

/* QUESTION 14: WRITE THE QUERY THAT RETURNS THE AVERAGE SHOPPING DAYS (SHOPPING DEFICIT) OF
THE FIRST 100 PEOPLE WHO SHOP THE MOST (BASED ON TURNOVER). */

SELECT  
D.MASTER_ID,
       D.TOTAL_REVENUE,
	   D.TOTAL_ORDER,
       ROUND((D.TOTAL_REVENUE / D.TOTAL_ORDER),2) AS AVG_PER_ORDER,
	   DATEDIFF(DAY, FIRST_ORDER_DATE, LAST_ORDER_DATE) AS DAYDIFF_FIRST_LAST,
	  ROUND((DATEDIFF(DAY, FIRST_ORDER_DATE, LAST_ORDER_DATE)/D.TOTAL_ORDER),1) AS ORDER_DAY_AVG 
  FROM
(
SELECT TOP 100 MASTER_ID, FIRST_ORDER_DATE, LAST_ORDER_DATE,
		   SUM(CUSTOMER_VALUE_TOTAL_EVER_OFFLINE + CUSTOMER_VALUE_TOTAL_EVER_ONLINE) AS  TOTAL_REVENUE,
		   SUM(ORDER_NUM_TOTAL_EVER_OFFLINE + ORDER_NUM_TOTAL_EVER_ONLINE) AS TOTAL_ORDER
	FROM FLO 
	GROUP BY MASTER_ID,FIRST_ORDER_DATE, LAST_ORDER_DATE
ORDER BY TOTAL_REVENUE DESC
) D

--QUESTION 15: WRITE THE QUERY THAT RETRIEVES THE MOST SHOPPED CUSTOMER IN THE LAST ORDER CHANNEL (LAST_ORDER_CHANNEL).

SELECT DISTINCT LAST_ORDER_CHANNEL,
(
	SELECT TOP 1 MASTER_ID
	FROM FLO  WHERE LAST_ORDER_CHANNEL=F.LAST_ORDER_CHANNEL
	GROUP BY MASTER_ID
	ORDER BY 
	SUM(CUSTOMER_VALUE_TOTAL_EVER_OFFLINE+CUSTOMER_VALUE_TOTAL_EVER_ONLINE) DESC 
) CUSTOMER_MOST_ORDER,
(
	SELECT TOP 1 SUM(CUSTOMER_VALUE_TOTAL_EVER_OFFLINE+CUSTOMER_VALUE_TOTAL_EVER_ONLINE)
	FROM FLO  WHERE LAST_ORDER_CHANNEL=F.LAST_ORDER_CHANNEL
	GROUP BY MASTER_ID
	ORDER BY 
	SUM(CUSTOMER_VALUE_TOTAL_EVER_OFFLINE+CUSTOMER_VALUE_TOTAL_EVER_ONLINE) DESC 
) REVENUE
FROM FLO F


/* QUESTION 16: PLEASE WRITE THE QUERY THAT RETRIEVES THE ID OF THE PERSON WHO MADE THE LAST PURCHASE. 
(THERE IS MORE THAN ONE ID THAT MADE MORE THAN ONE PURCHASE ON THE MAX LAST DATE. BRING THEM ALSO.) */ 

SELECT MASTER_ID,LAST_ORDER_DATE FROM FLO
WHERE LAST_ORDER_DATE=(SELECT MAX(LAST_ORDER_DATE) FROM FLO)


